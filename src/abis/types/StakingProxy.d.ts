/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingProxyInterface extends ethers.utils.Interface {
  functions: {
    "addAuthorizedAddress(address)": FunctionFragment;
    "aggregatedStatsByEpoch(uint256)": FunctionFragment;
    "assertValidStorageParams()": FunctionFragment;
    "attachStakingContract(address)": FunctionFragment;
    "authorities(uint256)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "batchExecute(bytes[])": FunctionFragment;
    "cobbDouglasAlphaDenominator()": FunctionFragment;
    "cobbDouglasAlphaNumerator()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "currentEpochStartTimeInSeconds()": FunctionFragment;
    "detachStakingContract()": FunctionFragment;
    "epochDurationInSeconds()": FunctionFragment;
    "getAuthorizedAddresses()": FunctionFragment;
    "grgReservedForPoolRewards()": FunctionFragment;
    "minimumPoolStake()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolIdByRbPoolAccount(address)": FunctionFragment;
    "poolStatsByEpoch(bytes32,uint256)": FunctionFragment;
    "removeAuthorizedAddress(address)": FunctionFragment;
    "removeAuthorizedAddressAtIndex(address,uint256)": FunctionFragment;
    "rewardDelegatedStakeWeight()": FunctionFragment;
    "rewardsByPoolId(bytes32)": FunctionFragment;
    "stakingContract()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validPops(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAuthorizedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatedStatsByEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assertValidStorageParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attachStakingContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchExecute",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cobbDouglasAlphaDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cobbDouglasAlphaNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochStartTimeInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "detachStakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDurationInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grgReservedForPoolRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumPoolStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolIdByRbPoolAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolStatsByEpoch",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedAddressAtIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDelegatedStakeWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsByPoolId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "validPops", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatedStatsByEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertValidStorageParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attachStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cobbDouglasAlphaDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cobbDouglasAlphaNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochStartTimeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "detachStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDurationInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grgReservedForPoolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumPoolStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolIdByRbPoolAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolStatsByEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedAddressAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDelegatedStakeWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsByPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validPops", data: BytesLike): Result;

  events: {
    "AuthorizedAddressAdded(address,address)": EventFragment;
    "AuthorizedAddressRemoved(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakingContractAttachedToProxy(address)": EventFragment;
    "StakingContractDetachedFromProxy()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedAddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StakingContractAttachedToProxy"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StakingContractDetachedFromProxy"
  ): EventFragment;
}

export class StakingProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingProxyInterface;

  functions: {
    addAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aggregatedStatsByEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardsAvailable: BigNumber;
        numPoolsToFinalize: BigNumber;
        totalFeesCollected: BigNumber;
        totalWeightedStake: BigNumber;
        totalRewardsFinalized: BigNumber;
      }
    >;

    assertValidStorageParams(overrides?: CallOverrides): Promise<[void]>;

    attachStakingContract(
      _stakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    batchExecute(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<[number]>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<[number]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpochStartTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    detachStakingContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumPoolStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolIdByRbPoolAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolStatsByEpoch(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        feesCollected: BigNumber;
        weightedStake: BigNumber;
        membersStake: BigNumber;
      }
    >;

    removeAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<[number]>;

    rewardsByPoolId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validPops(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addAuthorizedAddress(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aggregatedStatsByEpoch(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardsAvailable: BigNumber;
      numPoolsToFinalize: BigNumber;
      totalFeesCollected: BigNumber;
      totalWeightedStake: BigNumber;
      totalRewardsFinalized: BigNumber;
    }
  >;

  assertValidStorageParams(overrides?: CallOverrides): Promise<void>;

  attachStakingContract(
    _stakingContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorities(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  batchExecute(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<number>;

  cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<number>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpochStartTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  detachStakingContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

  grgReservedForPoolRewards(overrides?: CallOverrides): Promise<BigNumber>;

  minimumPoolStake(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolIdByRbPoolAccount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  poolStatsByEpoch(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      feesCollected: BigNumber;
      weightedStake: BigNumber;
      membersStake: BigNumber;
    }
  >;

  removeAuthorizedAddress(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAuthorizedAddressAtIndex(
    target: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<number>;

  rewardsByPoolId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validPops(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addAuthorizedAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    aggregatedStatsByEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardsAvailable: BigNumber;
        numPoolsToFinalize: BigNumber;
        totalFeesCollected: BigNumber;
        totalWeightedStake: BigNumber;
        totalRewardsFinalized: BigNumber;
      }
    >;

    assertValidStorageParams(overrides?: CallOverrides): Promise<void>;

    attachStakingContract(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    authorities(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    batchExecute(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<number>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<number>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStartTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    detachStakingContract(overrides?: CallOverrides): Promise<void>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPoolStake(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolIdByRbPoolAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    poolStatsByEpoch(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        feesCollected: BigNumber;
        weightedStake: BigNumber;
        membersStake: BigNumber;
      }
    >;

    removeAuthorizedAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<number>;

    rewardsByPoolId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validPops(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    AuthorizedAddressAdded(
      target?: string | null,
      caller?: string | null
    ): TypedEventFilter<[string, string], { target: string; caller: string }>;

    AuthorizedAddressRemoved(
      target?: string | null,
      caller?: string | null
    ): TypedEventFilter<[string, string], { target: string; caller: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    StakingContractAttachedToProxy(
      newStakingContractAddress?: null
    ): TypedEventFilter<[string], { newStakingContractAddress: string }>;

    StakingContractDetachedFromProxy(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    addAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aggregatedStatsByEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assertValidStorageParams(overrides?: CallOverrides): Promise<BigNumber>;

    attachStakingContract(
      _stakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchExecute(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStartTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    detachStakingContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPoolStake(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolIdByRbPoolAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolStatsByEpoch(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsByPoolId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validPops(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aggregatedStatsByEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assertValidStorageParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    attachStakingContract(
      _stakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchExecute(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cobbDouglasAlphaDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cobbDouglasAlphaNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpochStartTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    detachStakingContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochDurationInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizedAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grgReservedForPoolRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumPoolStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolIdByRbPoolAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolStatsByEpoch(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardDelegatedStakeWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsByPoolId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validPops(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
