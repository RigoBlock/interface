/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GovernanceInterface extends ethers.utils.Interface {
  functions: {
    "castVote(uint256,uint8)": FunctionFragment;
    "castVoteBySignature(uint256,uint8,uint8,bytes32,bytes32)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getProposalById(uint256)": FunctionFragment;
    "getProposalState(uint256)": FunctionFragment;
    "getReceipt(uint256,address)": FunctionFragment;
    "getVotingPower(address)": FunctionFragment;
    "governanceParameters()": FunctionFragment;
    "initializeGovernance()": FunctionFragment;
    "name()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposals()": FunctionFragment;
    "propose(tuple[],string)": FunctionFragment;
    "updateThresholds(uint256,uint256)": FunctionFragment;
    "upgradeImplementation(address)": FunctionFragment;
    "upgradeStrategy(address)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySignature",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proposals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [{ target: string; data: BytesLike; value: BigNumberish }[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateThresholds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposalById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(address,uint256,tuple[],uint256,uint256,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "StrategyUpgraded(address)": EventFragment;
    "ThresholdsUpdated(uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VoteCast(address,uint256,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export class Governance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GovernanceInterface;

  functions: {
    castVote(
      proposalId: BigNumberish,
      voteType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVoteBySignature(
      proposalId: BigNumberish,
      voteType: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber] & {
          target: string;
          data: string;
          value: BigNumber;
        })[]
      ] & {
        proposedActions: ([string, string, BigNumber] & {
          target: string;
          data: string;
          value: BigNumber;
        })[];
      }
    >;

    getProposalById(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            actionsLength: BigNumber;
            startBlockOrTime: BigNumber;
            endBlockOrTime: BigNumber;
            votesFor: BigNumber;
            votesAgainst: BigNumber;
            votesAbstain: BigNumber;
            executed: boolean;
          },
          ([string, string, BigNumber] & {
            target: string;
            data: string;
            value: BigNumber;
          })[]
        ] & {
          proposal: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            actionsLength: BigNumber;
            startBlockOrTime: BigNumber;
            endBlockOrTime: BigNumber;
            votesFor: BigNumber;
            votesAgainst: BigNumber;
            votesAbstain: BigNumber;
            executed: boolean;
          };
          proposedAction: ([string, string, BigNumber] & {
            target: string;
            data: string;
            value: BigNumber;
          })[];
        }
      ] & {
        proposalWrapper: [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            actionsLength: BigNumber;
            startBlockOrTime: BigNumber;
            endBlockOrTime: BigNumber;
            votesFor: BigNumber;
            votesAgainst: BigNumber;
            votesAbstain: BigNumber;
            executed: boolean;
          },
          ([string, string, BigNumber] & {
            target: string;
            data: string;
            value: BigNumber;
          })[]
        ] & {
          proposal: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            actionsLength: BigNumber;
            startBlockOrTime: BigNumber;
            endBlockOrTime: BigNumber;
            votesFor: BigNumber;
            votesAgainst: BigNumber;
            votesAbstain: BigNumber;
            executed: boolean;
          };
          proposedAction: ([string, string, BigNumber] & {
            target: string;
            data: string;
            value: BigNumber;
          })[];
        };
      }
    >;

    getProposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber, number] & {
          hasVoted: boolean;
          votes: BigNumber;
          voteType: number;
        }
      ]
    >;

    getVotingPower(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governanceParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [string, BigNumber, BigNumber, number] & {
            strategy: string;
            proposalThreshold: BigNumber;
            quorumThreshold: BigNumber;
            timeType: number;
          },
          string,
          string
        ] & {
          params: [string, BigNumber, BigNumber, number] & {
            strategy: string;
            proposalThreshold: BigNumber;
            quorumThreshold: BigNumber;
            timeType: number;
          };
          name: string;
          version: string;
        }
      ]
    >;

    initializeGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    proposalCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    proposals(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            actionsLength: BigNumber;
            startBlockOrTime: BigNumber;
            endBlockOrTime: BigNumber;
            votesFor: BigNumber;
            votesAgainst: BigNumber;
            votesAbstain: BigNumber;
            executed: boolean;
          },
          ([string, string, BigNumber] & {
            target: string;
            data: string;
            value: BigNumber;
          })[]
        ] & {
          proposal: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            actionsLength: BigNumber;
            startBlockOrTime: BigNumber;
            endBlockOrTime: BigNumber;
            votesFor: BigNumber;
            votesAgainst: BigNumber;
            votesAbstain: BigNumber;
            executed: boolean;
          };
          proposedAction: ([string, string, BigNumber] & {
            target: string;
            data: string;
            value: BigNumber;
          })[];
        })[]
      ] & {
        proposalWrapper: ([
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            actionsLength: BigNumber;
            startBlockOrTime: BigNumber;
            endBlockOrTime: BigNumber;
            votesFor: BigNumber;
            votesAgainst: BigNumber;
            votesAbstain: BigNumber;
            executed: boolean;
          },
          ([string, string, BigNumber] & {
            target: string;
            data: string;
            value: BigNumber;
          })[]
        ] & {
          proposal: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
          ] & {
            actionsLength: BigNumber;
            startBlockOrTime: BigNumber;
            endBlockOrTime: BigNumber;
            votesFor: BigNumber;
            votesAgainst: BigNumber;
            votesAbstain: BigNumber;
            executed: boolean;
          };
          proposedAction: ([string, string, BigNumber] & {
            target: string;
            data: string;
            value: BigNumber;
          })[];
        })[];
      }
    >;

    propose(
      actions: { target: string; data: BytesLike; value: BigNumberish }[],
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateThresholds(
      newProposalThreshold: BigNumberish,
      newQuorumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeImplementation(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeStrategy(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  castVote(
    proposalId: BigNumberish,
    voteType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVoteBySignature(
    proposalId: BigNumberish,
    voteType: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber] & {
      target: string;
      data: string;
      value: BigNumber;
    })[]
  >;

  getProposalById(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        actionsLength: BigNumber;
        startBlockOrTime: BigNumber;
        endBlockOrTime: BigNumber;
        votesFor: BigNumber;
        votesAgainst: BigNumber;
        votesAbstain: BigNumber;
        executed: boolean;
      },
      ([string, string, BigNumber] & {
        target: string;
        data: string;
        value: BigNumber;
      })[]
    ] & {
      proposal: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        actionsLength: BigNumber;
        startBlockOrTime: BigNumber;
        endBlockOrTime: BigNumber;
        votesFor: BigNumber;
        votesAgainst: BigNumber;
        votesAbstain: BigNumber;
        executed: boolean;
      };
      proposedAction: ([string, string, BigNumber] & {
        target: string;
        data: string;
        value: BigNumber;
      })[];
    }
  >;

  getProposalState(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, number] & {
      hasVoted: boolean;
      votes: BigNumber;
      voteType: number;
    }
  >;

  getVotingPower(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governanceParameters(
    overrides?: CallOverrides
  ): Promise<
    [
      [string, BigNumber, BigNumber, number] & {
        strategy: string;
        proposalThreshold: BigNumber;
        quorumThreshold: BigNumber;
        timeType: number;
      },
      string,
      string
    ] & {
      params: [string, BigNumber, BigNumber, number] & {
        strategy: string;
        proposalThreshold: BigNumber;
        quorumThreshold: BigNumber;
        timeType: number;
      };
      name: string;
      version: string;
    }
  >;

  initializeGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        actionsLength: BigNumber;
        startBlockOrTime: BigNumber;
        endBlockOrTime: BigNumber;
        votesFor: BigNumber;
        votesAgainst: BigNumber;
        votesAbstain: BigNumber;
        executed: boolean;
      },
      ([string, string, BigNumber] & {
        target: string;
        data: string;
        value: BigNumber;
      })[]
    ] & {
      proposal: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        actionsLength: BigNumber;
        startBlockOrTime: BigNumber;
        endBlockOrTime: BigNumber;
        votesFor: BigNumber;
        votesAgainst: BigNumber;
        votesAbstain: BigNumber;
        executed: boolean;
      };
      proposedAction: ([string, string, BigNumber] & {
        target: string;
        data: string;
        value: BigNumber;
      })[];
    })[]
  >;

  propose(
    actions: { target: string; data: BytesLike; value: BigNumberish }[],
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateThresholds(
    newProposalThreshold: BigNumberish,
    newQuorumThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeImplementation(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeStrategy(
    newStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    castVote(
      proposalId: BigNumberish,
      voteType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteBySignature(
      proposalId: BigNumberish,
      voteType: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber] & {
        target: string;
        data: string;
        value: BigNumber;
      })[]
    >;

    getProposalById(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          actionsLength: BigNumber;
          startBlockOrTime: BigNumber;
          endBlockOrTime: BigNumber;
          votesFor: BigNumber;
          votesAgainst: BigNumber;
          votesAbstain: BigNumber;
          executed: boolean;
        },
        ([string, string, BigNumber] & {
          target: string;
          data: string;
          value: BigNumber;
        })[]
      ] & {
        proposal: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          actionsLength: BigNumber;
          startBlockOrTime: BigNumber;
          endBlockOrTime: BigNumber;
          votesFor: BigNumber;
          votesAgainst: BigNumber;
          votesAbstain: BigNumber;
          executed: boolean;
        };
        proposedAction: ([string, string, BigNumber] & {
          target: string;
          data: string;
          value: BigNumber;
        })[];
      }
    >;

    getProposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, number] & {
        hasVoted: boolean;
        votes: BigNumber;
        voteType: number;
      }
    >;

    getVotingPower(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, number] & {
          strategy: string;
          proposalThreshold: BigNumber;
          quorumThreshold: BigNumber;
          timeType: number;
        },
        string,
        string
      ] & {
        params: [string, BigNumber, BigNumber, number] & {
          strategy: string;
          proposalThreshold: BigNumber;
          quorumThreshold: BigNumber;
          timeType: number;
        };
        name: string;
        version: string;
      }
    >;

    initializeGovernance(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          actionsLength: BigNumber;
          startBlockOrTime: BigNumber;
          endBlockOrTime: BigNumber;
          votesFor: BigNumber;
          votesAgainst: BigNumber;
          votesAbstain: BigNumber;
          executed: boolean;
        },
        ([string, string, BigNumber] & {
          target: string;
          data: string;
          value: BigNumber;
        })[]
      ] & {
        proposal: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          actionsLength: BigNumber;
          startBlockOrTime: BigNumber;
          endBlockOrTime: BigNumber;
          votesFor: BigNumber;
          votesAgainst: BigNumber;
          votesAbstain: BigNumber;
          executed: boolean;
        };
        proposedAction: ([string, string, BigNumber] & {
          target: string;
          data: string;
          value: BigNumber;
        })[];
      })[]
    >;

    propose(
      actions: { target: string; data: BytesLike; value: BigNumberish }[],
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateThresholds(
      newProposalThreshold: BigNumberish,
      newQuorumThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeImplementation(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeStrategy(
      newStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    ProposalCreated(
      proposer?: null,
      proposalId?: null,
      actions?: null,
      startBlockOrTime?: null,
      endBlockOrTime?: null,
      description?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        ([string, string, BigNumber] & {
          target: string;
          data: string;
          value: BigNumber;
        })[],
        BigNumber,
        BigNumber,
        string
      ],
      {
        proposer: string;
        proposalId: BigNumber;
        actions: ([string, string, BigNumber] & {
          target: string;
          data: string;
          value: BigNumber;
        })[];
        startBlockOrTime: BigNumber;
        endBlockOrTime: BigNumber;
        description: string;
      }
    >;

    ProposalExecuted(
      proposalId?: null
    ): TypedEventFilter<[BigNumber], { proposalId: BigNumber }>;

    StrategyUpgraded(
      newStrategy?: null
    ): TypedEventFilter<[string], { newStrategy: string }>;

    ThresholdsUpdated(
      proposalThreshold?: null,
      quorumThreshold?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { proposalThreshold: BigNumber; quorumThreshold: BigNumber }
    >;

    Upgraded(
      newImplementation?: string | null
    ): TypedEventFilter<[string], { newImplementation: string }>;

    VoteCast(
      voter?: null,
      proposalId?: null,
      voteType?: null,
      votingPower?: null
    ): TypedEventFilter<
      [string, BigNumber, number, BigNumber],
      {
        voter: string;
        proposalId: BigNumber;
        voteType: number;
        votingPower: BigNumber;
      }
    >;
  };

  estimateGas: {
    castVote(
      proposalId: BigNumberish,
      voteType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVoteBySignature(
      proposalId: BigNumberish,
      voteType: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalById(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPower(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceParameters(overrides?: CallOverrides): Promise<BigNumber>;

    initializeGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      actions: { target: string; data: BytesLike; value: BigNumberish }[],
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateThresholds(
      newProposalThreshold: BigNumberish,
      newQuorumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeImplementation(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeStrategy(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    castVote(
      proposalId: BigNumberish,
      voteType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVoteBySignature(
      proposalId: BigNumberish,
      voteType: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalById(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPower(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propose(
      actions: { target: string; data: BytesLike; value: BigNumberish }[],
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateThresholds(
      newProposalThreshold: BigNumberish,
      newQuorumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeImplementation(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeStrategy(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
