/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RbRegistryInterface extends ethers.utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "getMeta(address,bytes32)": FunctionFragment;
    "getPoolIdFromAddress(address)": FunctionFragment;
    "register(address,string,string,bytes32)": FunctionFragment;
    "rigoblockDao()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setMeta(address,bytes32,bytes32)": FunctionFragment;
    "setRigoblockDao(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMeta",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolIdFromAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rigoblockDao",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMeta",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRigoblockDao",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMeta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolIdFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rigoblockDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMeta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRigoblockDao",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityChanged(address)": EventFragment;
    "MetaChanged(address,bytes32,bytes32)": EventFragment;
    "Registered(address,address,bytes32,bytes32,bytes32)": EventFragment;
    "RigoblockDaoChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RigoblockDaoChanged"): EventFragment;
}

export class RbRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RbRegistryInterface;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    getMeta(
      pool: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { poolMeta: string }>;

    getPoolIdFromAddress(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[string] & { poolId: string }>;

    register(
      pool: string,
      name: string,
      symbol: string,
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rigoblockDao(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMeta(
      pool: string,
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRigoblockDao(
      newRigoblockDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  getMeta(
    pool: string,
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolIdFromAddress(
    pool: string,
    overrides?: CallOverrides
  ): Promise<string>;

  register(
    pool: string,
    name: string,
    symbol: string,
    poolId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rigoblockDao(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMeta(
    pool: string,
    key: BytesLike,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRigoblockDao(
    newRigoblockDao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    getMeta(
      pool: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolIdFromAddress(
      pool: string,
      overrides?: CallOverrides
    ): Promise<string>;

    register(
      pool: string,
      name: string,
      symbol: string,
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rigoblockDao(overrides?: CallOverrides): Promise<string>;

    setAuthority(
      newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMeta(
      pool: string,
      key: BytesLike,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRigoblockDao(
      newRigoblockDao: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuthorityChanged(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    MetaChanged(
      pool?: string | null,
      key?: BytesLike | null,
      value?: null
    ): TypedEventFilter<
      [string, string, string],
      { pool: string; key: string; value: string }
    >;

    Registered(
      group?: string | null,
      pool?: null,
      name?: BytesLike | null,
      symbol?: BytesLike | null,
      id?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      { group: string; pool: string; name: string; symbol: string; id: string }
    >;

    RigoblockDaoChanged(
      rigoblockDao?: string | null
    ): TypedEventFilter<[string], { rigoblockDao: string }>;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    getMeta(
      pool: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolIdFromAddress(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      pool: string,
      name: string,
      symbol: string,
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rigoblockDao(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMeta(
      pool: string,
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRigoblockDao(
      newRigoblockDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMeta(
      pool: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolIdFromAddress(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      pool: string,
      name: string,
      symbol: string,
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rigoblockDao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMeta(
      pool: string,
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRigoblockDao(
      newRigoblockDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
