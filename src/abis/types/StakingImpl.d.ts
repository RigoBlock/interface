/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingImplInterface extends ethers.utils.Interface {
  functions: {
    "addAuthorizedAddress(address)": FunctionFragment;
    "addPopAddress(address)": FunctionFragment;
    "aggregatedStatsByEpoch(uint256)": FunctionFragment;
    "authorities(uint256)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "cobbDouglasAlphaDenominator()": FunctionFragment;
    "cobbDouglasAlphaNumerator()": FunctionFragment;
    "computeRewardBalanceOfDelegator(bytes32,address)": FunctionFragment;
    "computeRewardBalanceOfOperator(bytes32)": FunctionFragment;
    "createStakingPool(address)": FunctionFragment;
    "creditPopReward(address,uint256)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "currentEpochStartTimeInSeconds()": FunctionFragment;
    "decreaseStakingPoolOperatorShare(bytes32,uint32)": FunctionFragment;
    "endEpoch()": FunctionFragment;
    "epochDurationInSeconds()": FunctionFragment;
    "finalizePool(bytes32)": FunctionFragment;
    "getAuthorizedAddresses()": FunctionFragment;
    "getCurrentEpochEarliestEndTimeInSeconds()": FunctionFragment;
    "getGlobalStakeByStatus(uint8)": FunctionFragment;
    "getGrgContract()": FunctionFragment;
    "getGrgVault()": FunctionFragment;
    "getOwnerStakeByStatus(address,uint8)": FunctionFragment;
    "getParams()": FunctionFragment;
    "getPoolRegistry()": FunctionFragment;
    "getStakeDelegatedToPoolByOwner(address,bytes32)": FunctionFragment;
    "getStakingPool(bytes32)": FunctionFragment;
    "getStakingPoolStatsThisEpoch(bytes32)": FunctionFragment;
    "getTotalStake(address)": FunctionFragment;
    "getTotalStakeDelegatedToPool(bytes32)": FunctionFragment;
    "grgReservedForPoolRewards()": FunctionFragment;
    "init()": FunctionFragment;
    "minimumPoolStake()": FunctionFragment;
    "moveStake(tuple,tuple,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolIdByRbPoolAccount(address)": FunctionFragment;
    "poolStatsByEpoch(bytes32,uint256)": FunctionFragment;
    "removeAuthorizedAddress(address)": FunctionFragment;
    "removeAuthorizedAddressAtIndex(address,uint256)": FunctionFragment;
    "removePopAddress(address)": FunctionFragment;
    "rewardDelegatedStakeWeight()": FunctionFragment;
    "rewardsByPoolId(bytes32)": FunctionFragment;
    "setParams(uint256,uint32,uint256,uint32,uint32)": FunctionFragment;
    "setStakingPalAddress(bytes32,address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakingContract()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "validPops(address)": FunctionFragment;
    "withdrawDelegatorRewards(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAuthorizedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPopAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatedStatsByEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cobbDouglasAlphaDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cobbDouglasAlphaNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeRewardBalanceOfDelegator",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRewardBalanceOfOperator",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createStakingPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditPopReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochStartTimeInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseStakingPoolOperatorShare",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endEpoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochDurationInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpochEarliestEndTimeInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStakeByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGrgContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGrgVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerStakeByStatus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeDelegatedToPoolByOwner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPoolStatsThisEpoch",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakeDelegatedToPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grgReservedForPoolRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumPoolStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveStake",
    values: [
      { status: BigNumberish; poolId: BytesLike },
      { status: BigNumberish; poolId: BytesLike },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolIdByRbPoolAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolStatsByEpoch",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedAddressAtIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePopAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDelegatedStakeWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsByPoolId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingPalAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "validPops", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawDelegatorRewards",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPopAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatedStatsByEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cobbDouglasAlphaDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cobbDouglasAlphaNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeRewardBalanceOfDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeRewardBalanceOfOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditPopReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochStartTimeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseStakingPoolOperatorShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochDurationInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpochEarliestEndTimeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStakeByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGrgContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGrgVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerStakeByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeDelegatedToPoolByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPoolStatsThisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakeDelegatedToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grgReservedForPoolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumPoolStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moveStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolIdByRbPoolAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolStatsByEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedAddressAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePopAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDelegatedStakeWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsByPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingPalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validPops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDelegatorRewards",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizedAddressAdded(address,address)": EventFragment;
    "AuthorizedAddressRemoved(address,address)": EventFragment;
    "CatchStringEvent(string)": EventFragment;
    "EpochEnded(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "EpochFinalized(uint256,uint256,uint256)": EventFragment;
    "GrgMintEvent(uint256)": EventFragment;
    "MoveStake(address,uint256,uint8,bytes32,uint8,bytes32)": EventFragment;
    "OperatorShareDecreased(bytes32,uint32,uint32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ParamsSet(uint256,uint32,uint256,uint256,uint256)": EventFragment;
    "PopAdded(address)": EventFragment;
    "PopRemoved(address)": EventFragment;
    "RbPoolStakingPoolSet(address,bytes32)": EventFragment;
    "ReturnDataEvent(bytes)": EventFragment;
    "RewardsPaid(uint256,bytes32,uint256,uint256)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "StakingPoolCreated(bytes32,address,uint32)": EventFragment;
    "StakingPoolEarnedRewardsInEpoch(uint256,bytes32)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedAddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CatchStringEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrgMintEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoveStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorShareDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParamsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PopAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PopRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RbPoolStakingPoolSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReturnDataEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPoolCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StakingPoolEarnedRewardsInEpoch"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export class StakingImpl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingImplInterface;

  functions: {
    addAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPopAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aggregatedStatsByEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardsAvailable: BigNumber;
        numPoolsToFinalize: BigNumber;
        totalFeesCollected: BigNumber;
        totalWeightedStake: BigNumber;
        totalRewardsFinalized: BigNumber;
      }
    >;

    authorities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<[number]>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<[number]>;

    computeRewardBalanceOfDelegator(
      poolId: BytesLike,
      member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    computeRewardBalanceOfOperator(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    createStakingPool(
      rigoblockPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditPopReward(
      poolAccount: string,
      popReward: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpochStartTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreaseStakingPoolOperatorShare(
      poolId: BytesLike,
      newOperatorShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizePool(
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentEpochEarliestEndTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGlobalStakeByStatus(
      stakeStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          currentEpoch: BigNumber;
          currentEpochBalance: BigNumber;
          nextEpochBalance: BigNumber;
        }
      ] & {
        balance: [BigNumber, BigNumber, BigNumber] & {
          currentEpoch: BigNumber;
          currentEpochBalance: BigNumber;
          nextEpochBalance: BigNumber;
        };
      }
    >;

    getGrgContract(overrides?: CallOverrides): Promise<[string]>;

    getGrgVault(overrides?: CallOverrides): Promise<[string]>;

    getOwnerStakeByStatus(
      staker: string,
      stakeStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          currentEpoch: BigNumber;
          currentEpochBalance: BigNumber;
          nextEpochBalance: BigNumber;
        }
      ] & {
        balance: [BigNumber, BigNumber, BigNumber] & {
          currentEpoch: BigNumber;
          currentEpochBalance: BigNumber;
          nextEpochBalance: BigNumber;
        };
      }
    >;

    getParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, number, number] & {
        _epochDurationInSeconds: BigNumber;
        _rewardDelegatedStakeWeight: number;
        _minimumPoolStake: BigNumber;
        _cobbDouglasAlphaNumerator: number;
        _cobbDouglasAlphaDenominator: number;
      }
    >;

    getPoolRegistry(overrides?: CallOverrides): Promise<[string]>;

    getStakeDelegatedToPoolByOwner(
      staker: string,
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          currentEpoch: BigNumber;
          currentEpochBalance: BigNumber;
          nextEpochBalance: BigNumber;
        }
      ] & {
        balance: [BigNumber, BigNumber, BigNumber] & {
          currentEpoch: BigNumber;
          currentEpochBalance: BigNumber;
          nextEpochBalance: BigNumber;
        };
      }
    >;

    getStakingPool(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number, number] & {
          operator: string;
          stakingPal: string;
          operatorShare: number;
          stakingPalShare: number;
        }
      ]
    >;

    getStakingPoolStatsThisEpoch(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          feesCollected: BigNumber;
          weightedStake: BigNumber;
          membersStake: BigNumber;
        }
      ]
    >;

    getTotalStake(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalStakeDelegatedToPool(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          currentEpoch: BigNumber;
          currentEpochBalance: BigNumber;
          nextEpochBalance: BigNumber;
        }
      ] & {
        balance: [BigNumber, BigNumber, BigNumber] & {
          currentEpoch: BigNumber;
          currentEpochBalance: BigNumber;
          nextEpochBalance: BigNumber;
        };
      }
    >;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumPoolStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    moveStake(
      from: { status: BigNumberish; poolId: BytesLike },
      to: { status: BigNumberish; poolId: BytesLike },
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolIdByRbPoolAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolStatsByEpoch(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        feesCollected: BigNumber;
        weightedStake: BigNumber;
        membersStake: BigNumber;
      }
    >;

    removeAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePopAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<[number]>;

    rewardsByPoolId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setParams(
      _epochDurationInSeconds: BigNumberish,
      _rewardDelegatedStakeWeight: BigNumberish,
      _minimumPoolStake: BigNumberish,
      _cobbDouglasAlphaNumerator: BigNumberish,
      _cobbDouglasAlphaDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingPalAddress(
      poolId: BytesLike,
      newStakingPalAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validPops(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawDelegatorRewards(
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAuthorizedAddress(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPopAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aggregatedStatsByEpoch(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardsAvailable: BigNumber;
      numPoolsToFinalize: BigNumber;
      totalFeesCollected: BigNumber;
      totalWeightedStake: BigNumber;
      totalRewardsFinalized: BigNumber;
    }
  >;

  authorities(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<number>;

  cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<number>;

  computeRewardBalanceOfDelegator(
    poolId: BytesLike,
    member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeRewardBalanceOfOperator(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createStakingPool(
    rigoblockPoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditPopReward(
    poolAccount: string,
    popReward: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpochStartTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseStakingPoolOperatorShare(
    poolId: BytesLike,
    newOperatorShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  finalizePool(
    poolId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

  getCurrentEpochEarliestEndTimeInSeconds(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGlobalStakeByStatus(
    stakeStatus: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      currentEpoch: BigNumber;
      currentEpochBalance: BigNumber;
      nextEpochBalance: BigNumber;
    }
  >;

  getGrgContract(overrides?: CallOverrides): Promise<string>;

  getGrgVault(overrides?: CallOverrides): Promise<string>;

  getOwnerStakeByStatus(
    staker: string,
    stakeStatus: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      currentEpoch: BigNumber;
      currentEpochBalance: BigNumber;
      nextEpochBalance: BigNumber;
    }
  >;

  getParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, number, number] & {
      _epochDurationInSeconds: BigNumber;
      _rewardDelegatedStakeWeight: number;
      _minimumPoolStake: BigNumber;
      _cobbDouglasAlphaNumerator: number;
      _cobbDouglasAlphaDenominator: number;
    }
  >;

  getPoolRegistry(overrides?: CallOverrides): Promise<string>;

  getStakeDelegatedToPoolByOwner(
    staker: string,
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      currentEpoch: BigNumber;
      currentEpochBalance: BigNumber;
      nextEpochBalance: BigNumber;
    }
  >;

  getStakingPool(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number] & {
      operator: string;
      stakingPal: string;
      operatorShare: number;
      stakingPalShare: number;
    }
  >;

  getStakingPoolStatsThisEpoch(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      feesCollected: BigNumber;
      weightedStake: BigNumber;
      membersStake: BigNumber;
    }
  >;

  getTotalStake(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalStakeDelegatedToPool(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      currentEpoch: BigNumber;
      currentEpochBalance: BigNumber;
      nextEpochBalance: BigNumber;
    }
  >;

  grgReservedForPoolRewards(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumPoolStake(overrides?: CallOverrides): Promise<BigNumber>;

  moveStake(
    from: { status: BigNumberish; poolId: BytesLike },
    to: { status: BigNumberish; poolId: BytesLike },
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolIdByRbPoolAccount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  poolStatsByEpoch(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      feesCollected: BigNumber;
      weightedStake: BigNumber;
      membersStake: BigNumber;
    }
  >;

  removeAuthorizedAddress(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAuthorizedAddressAtIndex(
    target: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePopAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<number>;

  rewardsByPoolId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setParams(
    _epochDurationInSeconds: BigNumberish,
    _rewardDelegatedStakeWeight: BigNumberish,
    _minimumPoolStake: BigNumberish,
    _cobbDouglasAlphaNumerator: BigNumberish,
    _cobbDouglasAlphaDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingPalAddress(
    poolId: BytesLike,
    newStakingPalAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validPops(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdrawDelegatorRewards(
    poolId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAuthorizedAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPopAddress(addr: string, overrides?: CallOverrides): Promise<void>;

    aggregatedStatsByEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardsAvailable: BigNumber;
        numPoolsToFinalize: BigNumber;
        totalFeesCollected: BigNumber;
        totalWeightedStake: BigNumber;
        totalRewardsFinalized: BigNumber;
      }
    >;

    authorities(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<number>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<number>;

    computeRewardBalanceOfDelegator(
      poolId: BytesLike,
      member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRewardBalanceOfOperator(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createStakingPool(
      rigoblockPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    creditPopReward(
      poolAccount: string,
      popReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStartTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseStakingPoolOperatorShare(
      poolId: BytesLike,
      newOperatorShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePool(poolId: BytesLike, overrides?: CallOverrides): Promise<void>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

    getCurrentEpochEarliestEndTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalStakeByStatus(
      stakeStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentEpoch: BigNumber;
        currentEpochBalance: BigNumber;
        nextEpochBalance: BigNumber;
      }
    >;

    getGrgContract(overrides?: CallOverrides): Promise<string>;

    getGrgVault(overrides?: CallOverrides): Promise<string>;

    getOwnerStakeByStatus(
      staker: string,
      stakeStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentEpoch: BigNumber;
        currentEpochBalance: BigNumber;
        nextEpochBalance: BigNumber;
      }
    >;

    getParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, number, number] & {
        _epochDurationInSeconds: BigNumber;
        _rewardDelegatedStakeWeight: number;
        _minimumPoolStake: BigNumber;
        _cobbDouglasAlphaNumerator: number;
        _cobbDouglasAlphaDenominator: number;
      }
    >;

    getPoolRegistry(overrides?: CallOverrides): Promise<string>;

    getStakeDelegatedToPoolByOwner(
      staker: string,
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentEpoch: BigNumber;
        currentEpochBalance: BigNumber;
        nextEpochBalance: BigNumber;
      }
    >;

    getStakingPool(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number] & {
        operator: string;
        stakingPal: string;
        operatorShare: number;
        stakingPalShare: number;
      }
    >;

    getStakingPoolStatsThisEpoch(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        feesCollected: BigNumber;
        weightedStake: BigNumber;
        membersStake: BigNumber;
      }
    >;

    getTotalStake(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStakeDelegatedToPool(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentEpoch: BigNumber;
        currentEpochBalance: BigNumber;
        nextEpochBalance: BigNumber;
      }
    >;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<BigNumber>;

    init(overrides?: CallOverrides): Promise<void>;

    minimumPoolStake(overrides?: CallOverrides): Promise<BigNumber>;

    moveStake(
      from: { status: BigNumberish; poolId: BytesLike },
      to: { status: BigNumberish; poolId: BytesLike },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolIdByRbPoolAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    poolStatsByEpoch(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        feesCollected: BigNumber;
        weightedStake: BigNumber;
        membersStake: BigNumber;
      }
    >;

    removeAuthorizedAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removePopAddress(addr: string, overrides?: CallOverrides): Promise<void>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<number>;

    rewardsByPoolId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setParams(
      _epochDurationInSeconds: BigNumberish,
      _rewardDelegatedStakeWeight: BigNumberish,
      _minimumPoolStake: BigNumberish,
      _cobbDouglasAlphaNumerator: BigNumberish,
      _cobbDouglasAlphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingPalAddress(
      poolId: BytesLike,
      newStakingPalAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    validPops(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    withdrawDelegatorRewards(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuthorizedAddressAdded(
      target?: string | null,
      caller?: string | null
    ): TypedEventFilter<[string, string], { target: string; caller: string }>;

    AuthorizedAddressRemoved(
      target?: string | null,
      caller?: string | null
    ): TypedEventFilter<[string, string], { target: string; caller: string }>;

    CatchStringEvent(
      reason?: null
    ): TypedEventFilter<[string], { reason: string }>;

    EpochEnded(
      epoch?: BigNumberish | null,
      numPoolsToFinalize?: null,
      rewardsAvailable?: null,
      totalFeesCollected?: null,
      totalWeightedStake?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        epoch: BigNumber;
        numPoolsToFinalize: BigNumber;
        rewardsAvailable: BigNumber;
        totalFeesCollected: BigNumber;
        totalWeightedStake: BigNumber;
      }
    >;

    EpochFinalized(
      epoch?: BigNumberish | null,
      rewardsPaid?: null,
      rewardsRemaining?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { epoch: BigNumber; rewardsPaid: BigNumber; rewardsRemaining: BigNumber }
    >;

    GrgMintEvent(
      grgAmount?: null
    ): TypedEventFilter<[BigNumber], { grgAmount: BigNumber }>;

    MoveStake(
      staker?: string | null,
      amount?: null,
      fromStatus?: null,
      fromPool?: BytesLike | null,
      toStatus?: null,
      toPool?: BytesLike | null
    ): TypedEventFilter<
      [string, BigNumber, number, string, number, string],
      {
        staker: string;
        amount: BigNumber;
        fromStatus: number;
        fromPool: string;
        toStatus: number;
        toPool: string;
      }
    >;

    OperatorShareDecreased(
      poolId?: BytesLike | null,
      oldOperatorShare?: null,
      newOperatorShare?: null
    ): TypedEventFilter<
      [string, number, number],
      { poolId: string; oldOperatorShare: number; newOperatorShare: number }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ParamsSet(
      epochDurationInSeconds?: null,
      rewardDelegatedStakeWeight?: null,
      minimumPoolStake?: null,
      cobbDouglasAlphaNumerator?: null,
      cobbDouglasAlphaDenominator?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber, BigNumber, BigNumber],
      {
        epochDurationInSeconds: BigNumber;
        rewardDelegatedStakeWeight: number;
        minimumPoolStake: BigNumber;
        cobbDouglasAlphaNumerator: BigNumber;
        cobbDouglasAlphaDenominator: BigNumber;
      }
    >;

    PopAdded(
      exchangeAddress?: null
    ): TypedEventFilter<[string], { exchangeAddress: string }>;

    PopRemoved(
      exchangeAddress?: null
    ): TypedEventFilter<[string], { exchangeAddress: string }>;

    RbPoolStakingPoolSet(
      rbPoolAddress?: string | null,
      poolId?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { rbPoolAddress: string; poolId: string }
    >;

    ReturnDataEvent(
      reason?: null
    ): TypedEventFilter<[string], { reason: string }>;

    RewardsPaid(
      epoch?: BigNumberish | null,
      poolId?: BytesLike | null,
      operatorReward?: null,
      membersReward?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        epoch: BigNumber;
        poolId: string;
        operatorReward: BigNumber;
        membersReward: BigNumber;
      }
    >;

    Stake(
      staker?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { staker: string; amount: BigNumber }
    >;

    StakingPoolCreated(
      poolId?: null,
      operator?: null,
      operatorShare?: null
    ): TypedEventFilter<
      [string, string, number],
      { poolId: string; operator: string; operatorShare: number }
    >;

    StakingPoolEarnedRewardsInEpoch(
      epoch?: BigNumberish | null,
      poolId?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string],
      { epoch: BigNumber; poolId: string }
    >;

    Unstake(
      staker?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { staker: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPopAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aggregatedStatsByEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    computeRewardBalanceOfDelegator(
      poolId: BytesLike,
      member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRewardBalanceOfOperator(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createStakingPool(
      rigoblockPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditPopReward(
      poolAccount: string,
      popReward: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStartTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseStakingPoolOperatorShare(
      poolId: BytesLike,
      newOperatorShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePool(
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpochEarliestEndTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalStakeByStatus(
      stakeStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGrgContract(overrides?: CallOverrides): Promise<BigNumber>;

    getGrgVault(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerStakeByStatus(
      staker: string,
      stakeStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParams(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeDelegatedToPoolByOwner(
      staker: string,
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingPool(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingPoolStatsThisEpoch(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStake(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStakeDelegatedToPool(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumPoolStake(overrides?: CallOverrides): Promise<BigNumber>;

    moveStake(
      from: { status: BigNumberish; poolId: BytesLike },
      to: { status: BigNumberish; poolId: BytesLike },
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolIdByRbPoolAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolStatsByEpoch(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePopAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsByPoolId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setParams(
      _epochDurationInSeconds: BigNumberish,
      _rewardDelegatedStakeWeight: BigNumberish,
      _minimumPoolStake: BigNumberish,
      _cobbDouglasAlphaNumerator: BigNumberish,
      _cobbDouglasAlphaDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingPalAddress(
      poolId: BytesLike,
      newStakingPalAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validPops(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawDelegatorRewards(
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPopAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aggregatedStatsByEpoch(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cobbDouglasAlphaDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cobbDouglasAlphaNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeRewardBalanceOfDelegator(
      poolId: BytesLike,
      member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeRewardBalanceOfOperator(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createStakingPool(
      rigoblockPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditPopReward(
      poolAccount: string,
      popReward: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpochStartTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseStakingPoolOperatorShare(
      poolId: BytesLike,
      newOperatorShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochDurationInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizePool(
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuthorizedAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEpochEarliestEndTimeInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalStakeByStatus(
      stakeStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGrgContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGrgVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnerStakeByStatus(
      staker: string,
      stakeStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeDelegatedToPoolByOwner(
      staker: string,
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingPool(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingPoolStatsThisEpoch(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStake(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStakeDelegatedToPool(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grgReservedForPoolRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumPoolStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveStake(
      from: { status: BigNumberish; poolId: BytesLike },
      to: { status: BigNumberish; poolId: BytesLike },
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolIdByRbPoolAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolStatsByEpoch(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAuthorizedAddress(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePopAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardDelegatedStakeWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsByPoolId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setParams(
      _epochDurationInSeconds: BigNumberish,
      _rewardDelegatedStakeWeight: BigNumberish,
      _minimumPoolStake: BigNumberish,
      _cobbDouglasAlphaNumerator: BigNumberish,
      _cobbDouglasAlphaDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingPalAddress(
      poolId: BytesLike,
      newStakingPalAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validPops(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawDelegatorRewards(
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
