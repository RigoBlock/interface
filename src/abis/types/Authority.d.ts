/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AuthorityInterface extends ethers.utils.Interface {
  functions: {
    "addMethod(bytes4,address)": FunctionFragment;
    "getApplicationAdapter(bytes4)": FunctionFragment;
    "isWhitelistedFactory(address)": FunctionFragment;
    "isWhitelister(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeMethod(bytes4,address)": FunctionFragment;
    "setAdapter(address,bool)": FunctionFragment;
    "setFactory(address,bool)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setWhitelister(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMethod",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationAdapter",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelister",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeMethod",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdapter",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWhitelister",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addMethod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelister",
    data: BytesLike
  ): Result;

  events: {
    "NewOwner(address,address)": EventFragment;
    "PermissionAdded(address,address,uint8)": EventFragment;
    "PermissionRemoved(address,address,uint8)": EventFragment;
    "RemovedMethod(address,address,bytes4)": EventFragment;
    "WhitelistedMethod(address,address,bytes4)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedMethod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedMethod"): EventFragment;
}

export class Authority extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AuthorityInterface;

  functions: {
    addMethod(
      selector: BytesLike,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApplicationAdapter(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isWhitelistedFactory(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelister(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeMethod(
      selector: BytesLike,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdapter(
      adapter: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      factory: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelister(
      whitelister: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMethod(
    selector: BytesLike,
    adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApplicationAdapter(
    selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isWhitelistedFactory(
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelister(target: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeMethod(
    selector: BytesLike,
    adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdapter(
    adapter: string,
    isWhitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    factory: string,
    isWhitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelister(
    whitelister: string,
    isWhitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMethod(
      selector: BytesLike,
      adapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getApplicationAdapter(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isWhitelistedFactory(
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelister(target: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeMethod(
      selector: BytesLike,
      adapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdapter(
      adapter: string,
      isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(
      factory: string,
      isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setWhitelister(
      whitelister: string,
      isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewOwner(
      old?: string | null,
      current?: string | null
    ): TypedEventFilter<[string, string], { old: string; current: string }>;

    PermissionAdded(
      from?: string | null,
      target?: string | null,
      permissionType?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, number],
      { from: string; target: string; permissionType: number }
    >;

    PermissionRemoved(
      from?: string | null,
      target?: string | null,
      permissionType?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, number],
      { from: string; target: string; permissionType: number }
    >;

    RemovedMethod(
      from?: string | null,
      adapter?: string | null,
      selector?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; adapter: string; selector: string }
    >;

    WhitelistedMethod(
      from?: string | null,
      adapter?: string | null,
      selector?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { from: string; adapter: string; selector: string }
    >;
  };

  estimateGas: {
    addMethod(
      selector: BytesLike,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApplicationAdapter(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedFactory(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelister(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeMethod(
      selector: BytesLike,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdapter(
      adapter: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactory(
      factory: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelister(
      whitelister: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMethod(
      selector: BytesLike,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApplicationAdapter(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedFactory(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelister(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMethod(
      selector: BytesLike,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdapter(
      adapter: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      factory: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelister(
      whitelister: string,
      isWhitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
